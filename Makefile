# C compiler options
CFLAGS += -Wall -Werror -std=c89 -ansi -Wpedantic

# local system OS
UNAME_S := $(shell uname -s)
ifneq ($(filter CYGWIN%,$(UNAME_S)),)
	OPER := cygwin
endif
ifeq ($(UNAME_S),Darwin)
	OPER := darwin
endif
ifeq ($(UNAME_S),Linux)
	OPER := linux
endif
ifneq ($(filter MINGW%,$(UNAME_S)),)
	OPER := mingw
endif

# local processor architecture
UNAME_M := $(shell uname -m)
PROC := $(UNAME_M)
ifeq (${OPER},linux)
ifeq (${PROC},x86_64)
ifeq ($(shell getconf LONG_BIT),32)
	PROC := i686
endif
endif
endif

# local system
SYSTEM := $(OPER)-$(PROC)

# default build is local system platform
TARGET := $(SYSTEM)

# local system target executables
DISC := $(SYSTEM)/disc
ORTER := $(SYSTEM)/orter
ORTERFORTH := $(SYSTEM)/orterforth

# system dependent command to get file size
ifeq ($(OPER),cygwin)
STAT := stat -c %s
endif
ifeq ($(OPER),darwin)
STAT := stat -f%z
endif
ifeq ($(OPER),linux)
STAT := stat -c %s
endif

# serial port
ifeq ($(OPER),cygwin)
SERIALPORT := /dev/ttyS2
endif
ifeq ($(OPER),darwin)
SERIALPORT := /dev/cu.usbserial-FT2XIBOF
endif
ifeq ($(OPER),linux)
SERIALPORT := /dev/ttyUSB0
endif
SERIALBAUD := 9600

# default target
.PHONY : default
default : build

# local disc server executable
$(DISC) : \
	$(SYSTEM)/orter_io.o \
	$(SYSTEM)/orter_serial.o \
	$(SYSTEM)/orter_spectrum.o \
	$(SYSTEM)/persci.o \
	disc.c

	$(CC) $(CFLAGS) $(CPPFLAGS) -o $@ $^

# orter - retrocomputing multitool
$(ORTER) : \
	$(SYSTEM)/orter_bbc.o \
	$(SYSTEM)/orter_io.o \
	$(SYSTEM)/orter_ql.o \
	$(SYSTEM)/orter_serial.o \
	$(SYSTEM)/orter_spectrum.o \
	orter/main.c

	$(CC) $(CFLAGS) $(CPPFLAGS) -o $@ $^


# === LOCAL SYSTEM ===

# SYSTEMOPTION := assembly
SYSTEMOPTION := default

SYSTEMDEPS := \
	$(SYSTEM)/inst.o \
	$(SYSTEM)/persci.o \
	$(SYSTEM)/rf.o \
	$(SYSTEM)/system.o

# local system assembly option config:
ifeq ($(SYSTEMOPTION),assembly)
# add the assembly code to deps
SYSTEMDEPS += $(SYSTEM)/rf_$(PROC).o
# tell C code it is there
CPPFLAGS += -DRF_ASSEMBLY
# reconcile leading underscore handling
ifeq ($(OPER),cygwin)
LDFLAGS += -t gcc.ld
endif
ifeq ($(OPER),linux)
LDFLAGS += -t gcc.ld
endif
endif

# local system executable
$(ORTERFORTH) : \
	$(SYSTEMDEPS) \
	main.c

	$(CC) $(CFLAGS) $(CPPFLAGS) $(LDFLAGS) -o $@ $^

# local system build dir
$(SYSTEM) :

	mkdir $@

# all local system executables
.PHONY : $(SYSTEM)-build
$(SYSTEM)-build : \
	$(DISC) \
	$(ORTER) \
	$(ORTERFORTH)

# clean local system build
.PHONY : $(SYSTEM)-clean
$(SYSTEM)-clean :

	rm -rf $(SYSTEM)/*
	rm -f model.disc
	rm -f model.inc

# default example
EXAMPLE=test

# run local build with example disc
.PHONY : $(SYSTEM)-example
$(SYSTEM)-example : $(ORTERFORTH) example/$(EXAMPLE).disc

	echo "EMPTY-BUFFERS 1 LOAD" | $< example/$(EXAMPLE).disc

# runtime disc images
DR0=messages.disc
DR1=data.disc

# run local build
.PHONY : $(SYSTEM)-run
$(SYSTEM)-run : $(ORTERFORTH) $(DR0)

	@touch $(DR1)
	@$< $(DR0) $(DR1)

# for analysing assembly code generated by the C compiler
$(SYSTEM)/%.s : %.c | $(SYSTEM)

	$(CC) -S $(CFLAGS) $(CPPFLAGS) -c -o $@ $<

# emulator to build fast
$(SYSTEM)/emulate_spectrum : \
	$(SYSTEM)/emulate_spectrum.o \
	$(SYSTEM)/z80.o \
	$(SYSTEM)/persci.o

	$(CC) -o $@ $^

# spectrum emulator
$(SYSTEM)/emulate_spectrum.o : target/spectrum/emulate.c persci.h | $(SYSTEM)

	$(CC) -g -Wall -Wextra -O2 -std=c99 -pedantic -c -o $@ $<

# inst lib
$(SYSTEM)/inst.o : inst.c model.inc rf.h system.inc persci.h | $(SYSTEM)

	$(CC) $(CFLAGS) $(CPPFLAGS) -c -o $@ $<

# orter libs - BBC Micro
$(SYSTEM)/orter_bbc.o : orter/bbc.c | $(SYSTEM)

	$(CC) $(CFLAGS) $(CPPFLAGS) -c -o $@ $<

# orter libs - nonblocking I/O utilities
$(SYSTEM)/orter_io.o : orter/io.c orter/io.h | $(SYSTEM)

	$(CC) $(CFLAGS) $(CPPFLAGS) -c -o $@ $<

# orter libs - Sinclair QL
$(SYSTEM)/orter_ql.o : orter/ql.c | $(SYSTEM)

	$(CC) $(CFLAGS) $(CPPFLAGS) -c -o $@ $<

# orter libs - serial port handling
$(SYSTEM)/orter_serial.o : orter/serial.c orter/io.h orter/serial.h | $(SYSTEM)

	$(CC) $(CFLAGS) $(CPPFLAGS) -c -o $@ $<

# orter libs - Sinclair ZX Spectrum
$(SYSTEM)/orter_spectrum.o : orter/spectrum.c | $(SYSTEM)

	$(CC) $(CFLAGS) $(CPPFLAGS) -c -o $@ $<

# disc impl lib
$(SYSTEM)/persci.o : persci.c persci.h | $(SYSTEM)

	$(CC) $(CFLAGS) $(CPPFLAGS) -c -o $@ $<

# C code lib
$(SYSTEM)/rf.o : rf.c rf.h system.inc | $(SYSTEM)

	$(CC) $(CFLAGS) $(CPPFLAGS) -c -o $@ $<

# assembly code lib
$(SYSTEM)/rf_$(PROC).o : rf_$(PROC).s | $(SYSTEM)

	$(CC) $(CFLAGS) $(CPPFLAGS) -DRF_OPER=$(OPER) -c -o $@ $<

# system dependent code lib
$(SYSTEM)/system.o : system.c rf.h system.inc persci.h | $(SYSTEM)

	$(CC) $(CFLAGS) $(CPPFLAGS) -c -o $@ $<

# https://github.com/superzazu/z80.git
$(SYSTEM)/z80.o : tools/z80/z80.c tools/z80/z80.h | $(SYSTEM)

	$(CC) -g -Wall -Wextra -O2 -std=c99 -pedantic -c -o $@ $<

# https://github.com/mcleod-ideafix/zx81putil
$(SYSTEM)/zx81putil : tools/zx81putil/zx81putil.c | $(SYSTEM)

	$(CC) -g -Wall -Wextra -O2 -std=c99 -pedantic -o $@ $<

# help
.PHONY : $(TARGET)-help
$(TARGET)-help :

	@if [ "$(TARGET)" = "$(SYSTEM)" ] ; then more help.txt ; else more target/$(TARGET)/help.txt ; fi

# disc images from %.f files including model.f
%.disc : %.f | $(DISC)

	$(DISC) create <$< >$@.io
	mv $@.io $@


# common inst script commands
CHECKMEMORY := printf '* \033[1;33mChecking memory limits\033[0;0m\n' ; sh scripts/check-memory.sh
STARTDISC := printf '* \033[1;33mStarting disc\033[0;0m\n' ; sh scripts/start.sh /dev/stdin /dev/stdout disc.pid $(DISC)
STARTDISCTCP := $(STARTDISC) tcp 5705
STOPDISC := printf '* \033[1;33mStopping disc\033[0;0m\n' ; sh scripts/stop.sh disc.pid
STARTMAME := printf '* \033[1;33mStarting MAME\033[0;0m\n' ; sh scripts/start.sh /dev/stdin /dev/stdout mame.pid mame
STOPMAME := printf '* \033[1;33mStopping MAME\033[0;0m\n' ; sh scripts/stop.sh mame.pid
WAITUNTILSAVED := printf '* \033[1;33mWaiting until saved\033[0;0m\n' ; sh scripts/wait-until-saved.sh

MAMEOPTS := -rompath roms -video opengl -skip_gameinfo -nomax -window

# build
.PHONY : build
build : $(TARGET)-build

include target/bbc/bbc.mk

include target/c64/c64.mk

# clean
.PHONY : clean
clean : $(TARGET)-clean

# clean all
.PHONY : clean-all
clean-all : $(SYSTEM)-clean spectrum-clean

# run disc on physical serial port
.PHONY : disc
disc : $(DISC) $(DR0) $(DR1)

	$(DISC) serial $(SERIALPORT) $(SERIALBAUD) $(DR0) $(DR1)


include target/dragon/dragon.mk

# help
.PHONY : help
help : $(TARGET)-help

# install to local
.PHONY : install
install : $(ORTER) $(ORTERFORTH)

	cp "$(ORTER)" /usr/local/bin/orter
	cp "$(ORTERFORTH)" /usr/local/bin/orterforth

include target/m100/m100.mk

# disc image as C include
model.inc : model.disc | $(ORTER)

	# xxd -i $< > $@.io
	$(ORTER) hex include model_disc < $< > $@.io
	mv $@.io $@

include target/pico/pico.mk


# === Sinclair QL ===

# QLOPTION := assembly
QLOPTION := default

ifeq ($(QLOPTION),assembly)
QLDEPS := ql/rf.o ql/rf_m68k.o ql/system.o ql/main.o
QLINC := target/ql/assembly.inc
endif

ifeq ($(QLOPTION),default)
QLDEPS := ql/rf.o ql/system.o ql/main.o
QLINC := target/ql/default.inc
endif

ql :

	mkdir $@

.PHONY : ql-build
ql-build : ql/orterforth

.PHONY : ql-clean
ql-clean :

	rm -rf ql/*

QLSERIALBAUD := 4800

# load from serial
.PHONY : ql-load-serial
#ql-load-serial :  ql/orterforth.ser ql/loader.ser | $(DISC) $(ORTER)
ql-load-serial : ql/orterforth.bin.ser ql/orterforth.ser ql/loader.ser | $(DISC) $(ORTER)

	@echo "On the QL type: baud $(QLSERIALBAUD):lrun ser2z"
	@read -p "Then press enter to start: " LINE

	@echo "* Loading loader..."
	@$(ORTER) serial -a $(SERIALPORT) $(QLSERIALBAUD) < ql/loader.ser
	@sleep 3

	@echo "* Loading install..."
	@sleep 1
	@$(ORTER) serial -a $(SERIALPORT) $(QLSERIALBAUD) < ql/orterforth.bin.ser
	@sleep 3

	@echo "* Loading job..."
	@sleep 1
	@$(ORTER) serial -a $(SERIALPORT) $(QLSERIALBAUD) < ql/orterforth.ser
	@sleep 3

	@echo "* Starting disc..."
	@touch data.disc
	@$(DISC) serial $(SERIALPORT) $(QLSERIALBAUD) model.disc data.disc

# inst executable
ql/inst : ql/inst.o $(QLDEPS)

	qld -ms -o $@ $^

# installer
ql/inst.o : inst.c rf.h $(QLINC) | ql

	qcc -D RF_TARGET_INC='"$(QLINC)"' -o $@ -c $<

# inst executable with serial header
ql/inst.ser : ql/inst | $(ORTER)

	$(ORTER) ql serial-xtcc $< > $@

# loader terminated with Ctrl+Z, to load via SER2Z
ql/loader-inst.ser : target/ql/loader-inst.bas

	cat $< > $@.io
	printf '\032' >> $@.io
	mv $@.io $@

# loader terminated with Ctrl+Z, to load via SER2Z
ql/loader.ser : target/ql/loader.bas

	cat $< > $@.io
	printf '\032' >> $@.io
	mv $@.io $@

# main program
ql/main.o : main.c rf.h $(QLINC) inst.h | ql

	qcc -o $@ -c $<

# final executable
ql/orterforth : ql/relink.o $(QLDEPS)

	qld -ms -o $@ $^

# saved binary
ql/orterforth.bin : ql/orterforth.bin.hex | $(ORTER)

	$(ORTER) hex read < $< > $@

# saved binary as hex
ql/orterforth.bin.hex : ql/inst.ser ql/loader-inst.ser | $(DISC) $(ORTER)

	@echo "On the QL type: baud $(QLSERIALBAUD):lrun ser2z"
	@read -p "Then press enter to start: " LINE

	@echo "* Loading loader..."
	@$(ORTER) serial -a $(SERIALPORT) $(QLSERIALBAUD) < ql/loader-inst.ser

	@echo "* Loading installer..."
	@sleep 1
	@$(ORTER) serial -a $(SERIALPORT) $(QLSERIALBAUD) < ql/inst.ser

	# TODO use disc start/stop script
	@echo "* Starting disc and waiting for completion..."
	@touch $@.io
	@$(DISC) serial $(SERIALPORT) $(QLSERIALBAUD) model.disc $@.io & pid=$$! ; \
		scripts/wait-until-saved.sh $@.io ; \
		kill -9 $$pid

	@mv $@.io $@
	@echo "* Done"
	@sleep 1

# saved binary with serial header
ql/orterforth.bin.ser : ql/orterforth.bin | $(ORTER)

	$(ORTER) ql serial-bytes $< > $@

# final binary with serial header
ql/orterforth.ser : ql/orterforth | $(ORTER)

	$(ORTER) ql serial-xtcc $< > $@

# relinker
ql/relink.o : target/ql/relink.c rf.h $(QLINC) | ql

	qcc -D RF_TARGET_INC='"$(QLINC)"' -o $@ -c $<

# machine and code
ql/rf.o : rf.c rf.h $(QLINC) | ql

	qcc -D RF_TARGET_INC='"$(QLINC)"' -o $@ -c $<

ql/rf.s : rf.c rf.h $(QLINC) | ql

	qcc -D RF_TARGET_INC='"$(QLINC)"' -S -c $<

# assembly code
ql/rf_m68k.o : rf_m68k.s | ql

	qcc -o $@ -c $<

# system support
ql/system.o : target/ql/system.c rf.h $(QLINC) | ql

	qcc -D RF_TARGET_INC='"$(QLINC)"' -o $@ -c $<


# === RC2014 ===

rc2014 :

	mkdir $@

.PHONY : rc2014-build
rc2014-build : rc2014/orterforth.ihx

.PHONY : rc2014-clean
rc2014-clean :

	rm -rf rc2014/*

# RC2014 serial port name
ifeq ($(OPER),cygwin)
RC2014SERIALPORT := /dev/ttyS2
endif
ifeq ($(OPER),darwin)
RC2014SERIALPORT := /dev/cu.usbserial-A50285BI
endif
ifeq ($(OPER),linux)
RC2014SERIALPORT := /dev/ttyUSB0
endif

RC2014OPTION := assembly
#RC2014OPTION := default

RC2014DEPS := rc2014/rf.lib rc2014/inst.lib rc2014/system.lib
RC2014INSTOFFSET := 0x5000
RC2014LIBS := -lrc2014/rf -lrc2014/inst -lrc2014/system
RC2014ORG := 0x9000

ifeq ($(RC2014OPTION),assembly)
RC2014DEPS += rc2014/z80.lib
RC2014INC := target/rc2014/assembly.inc
RC2014LIBS += -lrc2014/z80
RC2014ORIGIN := 0x9F00
endif
ifeq ($(RC2014OPTION),default)
RC2014INC := target/rc2014/default.inc
RC2014ORIGIN := 0xAB00
endif

RC2014RESET := \
	printf '* \033[1;35mOn the RC2014: connect serial and press reset\033[0;0m\n' && \
	read -p "Then press enter to start: " LINE && \
	printf '* \033[1;33mResetting\033[0;0m\n' && \
	sh target/rc2014/reset.sh | $(ORTER) serial -o olfcr -a $(RC2014SERIALPORT) 115200

.PHONY : rc2014-run
rc2014-run : rc2014/orterforth.ser | $(ORTER) $(DISC)

	@$(RC2014RESET)

	@printf '* \033[1;33mLoading via serial\033[0;0m\n'
	@$(ORTER) serial -o olfcr -e 3 $(RC2014SERIALPORT) 115200 < rc2014/orterforth.ser

	@printf '* \033[1;33mStarting disc with console mux\033[0;0m\n'
	@$(DISC) mux $(RC2014SERIALPORT) 115200 $(DR0) $(DR1)

# hexload
rc2014/hexload.bas : tools/github.com/RC2014Z80/RC2014/BASIC-Programs/hexload/hexload.bas | rc2014

	cp $< $@

# inst executable
rc2014/inst_CODE.bin : \
	$(RC2014DEPS) \
	z80_memory.asm \
	main.c

	zcc +rc2014 -subtype=basic -clib=new -DRF_TARGET_INC='\"$(RC2014INC)\"' \
		$(RC2014LIBS) \
		-Ca-DCRT_ITERM_TERMINAL_FLAGS=0x0000 \
	 	-Ca-DRF_ORG=$(RC2014ORG) \
	 	-Ca-DRF_INST_OFFSET=$(RC2014INSTOFFSET) \
		-m \
		-o rc2014/inst \
		z80_memory.asm main.c

# start with an empty bin file to build the multi segment bin
rc2014/inst-0.bin : | rc2014

	z88dk-appmake +rom \
		--romsize 0x7000 \
		--filler 0 \
		--output $@

# add main code at start
rc2014/inst-1.bin : \
	rc2014/inst-0.bin \
	rc2014/inst_CODE.bin

	z88dk-appmake +inject \
		--binfile $< \
		--inject rc2014/inst_CODE.bin \
		--offset 0 \
		--output $@

# add inst code at offset, safely beyond dictionary
rc2014/inst-2.bin : \
	rc2014/inst-1.bin \
	rc2014/inst_INST.bin

	z88dk-appmake +inject \
		--binfile $< \
		--inject rc2014/inst_INST.bin \
		--offset $(RC2014INSTOFFSET) \
		--output $@

# make inst tap from inst bin
rc2014/inst.ihx : rc2014/inst-2.bin

	z88dk-appmake +hex \
		--binfile $< \
		--org $(RC2014ORG) \
		--output $@

# both CODE and INST bin files are built by same command
rc2014/inst_INST.bin : rc2014/inst_CODE.bin

# inst code
rc2014/inst.lib : inst.c rf.h $(RC2014INC) inst.h | rc2014

	zcc +rc2014 -clib=new \
		-DRF_TARGET_INC='\"$(RC2014INC)\"' \
		-x -o $@ $< \
		--codeseg=INST \
		--dataseg=INST \
		--bssseg=INST \
		--constseg=INST

# inst serial load file - seems an unreliable approach
rc2014/inst.ser : rc2014/hexload.bas rc2014/inst.ihx

	cp rc2014/hexload.bas $@.io
	cat rc2014/inst.ihx >> $@.io
	mv $@.io $@

# final binary from hex
rc2014/orterforth : rc2014/orterforth.hex | $(ORTER)

	$(ORTER) hex read < $< > $@.io
	mv $@.io $@

# saved hex result
rc2014/orterforth.hex : rc2014/hexload.bas rc2014/inst.ihx model.disc | $(DISC) $(ORTER)

	@$(CHECKMEMORY) $(RC2014ORG) $(RC2014ORIGIN) $(shell $(STAT) rc2014/inst_CODE.bin)

	@$(RC2014RESET)

	@printf '* \033[1;33mLoading hexload\033[0;0m\n'
	@$(ORTER) serial -o olfcr -e 3 $(RC2014SERIALPORT) 115200 < rc2014/hexload.bas
	@printf '* \033[1;33mLoading inst\033[0;0m\n'
	@$(ORTER) serial -o olfcr -e 3 $(RC2014SERIALPORT) 115200 < rc2014/inst.ihx

	@printf '* \033[1;33mClearing DR1\033[0;0m\n'
	@rm -f $@.io
	@touch $@.io

	@$(STARTDISC) mux $(RC2014SERIALPORT) 115200 model.disc $@.io

	@$(WAITUNTILSAVED) $@.io

	@$(STOPDISC)

	@printf '* \033[1;33mDone\033[0;0m\n'
	@mv $@.io $@

# final binary as IHEX
rc2014/orterforth.ihx : rc2014/orterforth

	z88dk-appmake +hex --org $(RC2014ORG) --binfile $< --output $@

# serial load file
rc2014/orterforth.ser : rc2014/hexload.bas rc2014/orterforth.ihx

	cp rc2014/hexload.bas $@.io
	cat rc2014/orterforth.ihx >> $@.io
	mv $@.io $@

# base orterforth code
rc2014/rf.lib : rf.c rf.h $(RC2014INC) | rc2014

	zcc +rc2014 -clib=new -DRF_TARGET_INC='\"$(RC2014INC)\"' -x -o $@ $<

# system code
rc2014/system.lib : target/rc2014/system.c rf.h $(RC2014INC) | rc2014

	zcc +rc2014 -clib=new -DRF_TARGET_INC='\"$(RC2014INC)\"' -x -o $@ $<

# Z80 assembly optimised code
rc2014/z80.lib : rf_z80.asm | rc2014

	zcc +rc2014 -clib=new \
		-Ca-DRF_ORIGIN=$(RC2014ORIGIN) \
		-x -o $@ \
		$<

# Raspberry Pi 1 - armv6l assembly source is (currently) the same as armv7l
rf_armv6l.s : rf_armv7l.s

	cp -p $< $@

# ROM file dir
roms : 

	mkdir $@

# ZX Spectrum ROM files dir
roms/spectrum : | roms

	mkdir $@

# ZX Spectrum ROM files
roms/spectrum/% : | roms/spectrum

	@[ -f $@ ] || (echo "ROM file required: $@" && exit 1)

# run local build
.PHONY : run
run : $(TARGET)-run

# run working script
.PHONY : script
script :

	@[ -f scripts/script.sh ] || (echo "Create the file scripts/script.sh for your working script and run it using: make script" && exit 1)
	sh scripts/script.sh


# === ZX Spectrum ===

spectrum :

	mkdir $@

.PHONY : spectrum-build
spectrum-build : spectrum/orterforth.ser spectrum/orterforth.tap

.PHONY : spectrum-clean
spectrum-clean :

	rm -rf spectrum/*

# locate Fuse Emulator
ifeq ($(OPER),cygwin)
FUSE := "/cygdrive/c/Program Files/Fuse/fuse.exe"
else
FUSE := $(shell which fuse)
endif

# default inst time emulator
SPECTRUMINSTMACHINE := fuse

# locates inst code at 0xC800
SPECTRUMINSTOFFSET := 18432

# command line linked libraries
SPECTRUMLIBS := \
	-lmzx_tiny \
	-lndos \
	-lspectrum/inst \
	-lspectrum/rf \
	-lspectrum/system

# config option
SPECTRUMOPTION := assembly
# SPECTRUMOPTION := assembly-z88dk
# SPECTRUMOPTION := default

# ORG starts at non-contended memory, 0x8000, for performance
SPECTRUMORG := 0x8000

# ROM files for emulator
SPECTRUMROMS := \
	roms/spectrum/if1-2.rom \
	roms/spectrum/spectrum.rom

# minimal ROM-based
ifeq ($(SPECTRUMOPTION),assembly)
# uses Interface 1 ROM for RS232
SPECTRUMLIBS += -lspectrum/rf_z80 -pragma-redirect:fputc_cons=fputc_cons_rom_rst
# include file
SPECTRUMINC := target/spectrum/assembly.inc
# ORIGIN
SPECTRUMORIGIN := 0x8A00
# assembly system dependent code uses ROM routines
SPECTRUMSYSTEM := target/spectrum/system.asm
# superzazu emulator is minimal and launches no GUI
# it can only be used if RS232 ROM calls are used
SPECTRUMINSTMACHINE := superzazu
endif

# z88dk library based
ifeq ($(SPECTRUMOPTION),assembly-z88dk)
# include file
SPECTRUMINC := target/spectrum/assembly-z88dk.inc
# requires z88dk RS232 library
SPECTRUMLIBS += -lspectrum/rf_z80 -lrs232if1
# ORIGIN higher, 0x9200, C code is larger as uses z88dk libs
SPECTRUMORIGIN := 0x9200
# C impl of system dependent code uses z88dk libs
SPECTRUMSYSTEM := target/spectrum/system.c
endif

# z88dk / pure C based
ifeq ($(SPECTRUMOPTION),default)
# include file
SPECTRUMINC := target/spectrum/default.inc
# requires z88dk RS232 library
SPECTRUMLIBS += -lrs232if1
# ORIGIN higher, 0x9B00, C code is larger as uses z88dk libs and pure C impl
SPECTRUMORIGIN := 0x9D00
# C impl of system dependent code uses z88dk libs
SPECTRUMSYSTEM := target/spectrum/system.c
endif

# superzazu fast partial emulator can't be used for run time
SPECTRUMMACHINE := $(SPECTRUMINSTMACHINE)
ifeq ($(SPECTRUMMACHINE),superzazu)
SPECTRUMMACHINE := fuse
endif

ifeq ($(SPECTRUMMACHINE),fuse)
SPECTRUMRUNDEPS := \
	spectrum/orterforth.tap \
	$(DR0) \
	$(DR1) | \
	$(DISC) \
	$(SPECTRUMROMS) \
	spectrum/fuse-rs232-rx \
	spectrum/fuse-rs232-tx
endif
ifeq ($(SPECTRUMMACHINE),mame)
SPECTRUMRUNDEPS := \
	spectrum/orterforth.tap \
	$(DR0) \
	$(DR1) | \
	$(DISC) \
	$(SPECTRUMROMS)
endif
ifeq ($(SPECTRUMMACHINE),real)
SPECTRUMRUNDEPS := \
	spectrum/orterforth.ser \
	target/spectrum/load-serial.bas \
	$(DR0) \
	$(DR1) | \
	$(DISC) \
	$(ORTER)
endif

STARTDISCFUSE := \
	printf '* \033[1;33mStarting disc\033[0;0m\n' ; \
	sh scripts/start.sh spectrum/fuse-rs232-tx spectrum/fuse-rs232-rx disc.pid $(DISC) fuse

FUSEOPTS := \
	--machine 48 \
	--graphics-filter 2x \
	--interface1 \
	--rom-48 roms/spectrum/spectrum.rom \
	--rom-interface-1 roms/spectrum/if1-2.rom \
	--auto-load \
	--phantom-typist-mode keyword \
	--rs232-rx spectrum/fuse-rs232-rx \
	--rs232-tx spectrum/fuse-rs232-tx

.PHONY : spectrum-run
spectrum-run : $(SPECTRUMRUNDEPS)

ifeq ($(SPECTRUMMACHINE),real)
	@printf '* \035[1;35mOn the Spectrum type:\035[0;0m\n'
	@printf '  FORMAT "b";$(SERIALBAUD) <enter>\n'
	@printf '  LOAD *"b" <enter>\n'
	@read -p '  then press enter to start: ' LINE

	@printf '* \033[1;33mLoading loader\033[0;0m\n'
	$(ORTER) serial -e 2 $(SERIALPORT) $(SERIALBAUD) < target/spectrum/load-serial.bas

	@printf '* \033[1;33mLoading orterforth\033[0;0m\n'
	$(ORTER) serial -a $(SERIALPORT) $(SERIALBAUD) < spectrum/orterforth.ser
endif

ifeq ($(SPECTRUMMACHINE),fuse)
	@$(STARTDISCFUSE) $(DR0) $(DR1)
endif
ifeq ($(SPECTRUMMACHINE),mame)
	@$(STARTDISCTCP) $(DR0) $(DR1)
endif
ifeq ($(SPECTRUMMACHINE),real)
	@printf '* \033[1;33mStarting disc\033[0;0m\n'
	@$(DISC) serial $(SERIALPORT) $(SERIALBAUD) $(DR0) $(DR1)
endif

ifeq ($(SPECTRUMMACHINE),fuse)
	@printf '* \033[1;33mRunning Fuse\033[0;0m\n'
	@printf '  \033[1;35mNB please type LOAD "" (phantom typist not working currently)\033[0;0m\n'
	$(FUSE) $(FUSEOPTS) --speed=100 --tape $<
endif
ifeq ($(SPECTRUMMACHINE),mame)
	@echo '1. Press Enter to skip the warning'
	@echo '2. Start the tape via F2 or the Tape Control menu'
	@mame spectrum $(MAMEOPTS) \
		-exp intf1 \
		-exp:intf1:rs232 null_modem \
		-bitb socket.localhost:5705 \
		-autoboot_delay 5 \
		-autoboot_command 'j""\n' \
		-cassette $<
endif

ifneq ($(SPECTRUMMACHINE),real)
	@$(STOPDISC)
endif

# Fuse serial named pipe
spectrum/fuse-rs232-rx : | spectrum

	mkfifo $@

# Fuse serial named pipe
spectrum/fuse-rs232-tx : | spectrum

	mkfifo $@

# inst executable
spectrum/inst.bin : \
	spectrum/inst.lib \
	spectrum/rf.lib \
	spectrum/rf_z80.lib \
	spectrum/system.lib \
	z80_memory.asm \
	main.c

	zcc +zx \
 		-DRF_TARGET_INC='\"$(SPECTRUMINC)\"' \
 		-DRF_ORIGIN=$(SPECTRUMORIGIN) \
		-Ca-DRF_ORG=$(SPECTRUMORG) \
		-Ca-DRF_INST_OFFSET=$(SPECTRUMINSTOFFSET) \
		$(SPECTRUMLIBS) \
		-pragma-define:CRT_ENABLE_STDIO=0 \
		-pragma-define:CRT_INITIALIZE_BSS=0 \
		-m \
		-o $@ \
		z80_memory.asm main.c

# inst code, which is located to be overwritten when complete
spectrum/inst.lib : inst.c rf.h | spectrum

	zcc +zx \
		-DRF_TARGET_INC='\"$(SPECTRUMINC)\"' \
		-DRF_ORG=$(SPECTRUMORG) \
		-DRF_ORIGIN=$(SPECTRUMORIGIN) \
		-x -o $@ \
		$< \
		--codeseg=INST --dataseg=INST --bssseg=INST --constseg=INST

# start with an empty bin file to build the multi segment bin
spectrum/inst-0.bin : | spectrum

	z88dk-appmake +rom \
		-s $(SPECTRUMORG) \
		-f 0 \
		-o $@

# add main code at start
spectrum/inst-1.bin : \
	spectrum/inst-0.bin \
	spectrum/inst.bin

	z88dk-appmake +inject \
		-b spectrum/inst-0.bin \
		-i spectrum/inst.bin \
		-s 0 \
		-o $@

# add inst code at offset, safely beyond dictionary
spectrum/inst-2.bin : \
	spectrum/inst-1.bin \
	spectrum/inst_INST.bin

	z88dk-appmake +inject \
		-b spectrum/inst-1.bin \
		-i spectrum/inst_INST.bin \
		-s $(SPECTRUMINSTOFFSET) \
		-o $@
	# cat $< > $@.io
	# head -c 32768 /dev/null >> $@.io
	# head -c $(SPECTRUMINSTOFFSET) $@.io > $@
	# cat spectrum/inst_INST.bin >> $@


# make inst serial load file from inst bin
spectrum/inst-2.ser : spectrum/inst-2.bin | $(ORTER)

	$(ORTER) spectrum header $< 3 32768 0 > $@

# make inst tap from inst bin
spectrum/inst-2.tap : spectrum/inst-2.bin

	z88dk-appmake +zx \
		-b $< \
		--org $(SPECTRUMORG) \
		-o $@

# both main and INST bin files are built by same command
spectrum/inst_INST.bin : spectrum/inst.bin

# final bin from the hex output by inst
spectrum/orterforth.bin : spectrum/orterforth.bin.hex | $(ORTER)

	$(ORTER) hex read < $< > $@

# run inst which writes hex file to disc 01
ifeq ($(SPECTRUMINSTMACHINE),fuse)
SPECTRUMINSTDEPS := \
	spectrum/inst-2.tap | \
	$(DISC) \
	$(ORTER) \
	$(SPECTRUMROMS) \
	spectrum/fuse-rs232-rx \
	spectrum/fuse-rs232-tx
endif
ifeq ($(SPECTRUMINSTMACHINE),real)
SPECTRUMINSTDEPS := \
	spectrum/inst-2.ser | \
	$(DISC) \
	$(ORTER)
endif
ifeq ($(SPECTRUMINSTMACHINE),superzazu)
SPECTRUMINSTDEPS := \
	spectrum/inst-2.tap | \
	$(SYSTEM)/emulate_spectrum \
	$(SPECTRUMROMS)
endif

spectrum/orterforth.bin.hex : model.disc $(SPECTRUMINSTDEPS)

	@$(CHECKMEMORY) $(SPECTRUMORG) $(SPECTRUMORIGIN) $(shell $(STAT) spectrum/inst.bin)

	@printf '* \033[1;33mClearing DR1\033[0;0m\n'
	@rm -f $@.io
	@touch $@.io

ifeq ($(SPECTRUMINSTMACHINE),real)
	@printf '* \033[1;35mOn the Spectrum type:\033[0;0m\n'
	@printf '  FORMAT "b";$(SERIALBAUD) <enter>\n'
	@printf '  LOAD *"b" <enter>\n'
	@read -p '  then press enter to start: ' LINE

	@printf '* \033[1;33mLoading loader\033[0;0m\n'
	@# TODO load-serial could send ACK and we could use -a
	@$(ORTER) serial -e 2 $(SERIALPORT) $(SERIALBAUD) < target/spectrum/load-serial.bas

	@printf '* \033[1;33mLoading inst\033[0;0m\n'
	@$(ORTER) serial -a $(SERIALPORT) $(SERIALBAUD) < spectrum/inst-2.ser
endif

ifeq ($(SPECTRUMINSTMACHINE),real)
	@$(STARTDISC) serial $(SERIALPORT) $(SERIALBAUD) model.disc $@.io
	@printf '  \033[1;35mNB Unfortunately this usually fails due to Spectrum RS232 unreliability\033[0;0m\n'
endif
ifeq ($(SPECTRUMINSTMACHINE),fuse)
	@$(STARTDISCFUSE) model.disc $@.io

	@printf '* \033[1;33mStarting Fuse\033[0;0m\n'
	@printf '  \033[1;35mNB please type LOAD "" (phantom typist not working currently)\033[0;0m\n'
	@sh scripts/start.sh /dev/stdin /dev/stdout fuse.pid $(FUSE) $(FUSEOPTS) --speed=1000 --tape spectrum/inst-2.tap
endif

ifeq ($(SPECTRUMINSTMACHINE),superzazu)
	@printf '* \033[1;33mRunning headless emulator\033[0;0m\n'
	@./$(SYSTEM)/emulate_spectrum
endif

ifneq ($(SPECTRUMINSTMACHINE),superzazu)
	@$(WAITUNTILSAVED) $@.io

ifeq ($(SPECTRUMINSTMACHINE),fuse)
	@printf '* \033[1;33mStopping Fuse\033[0;0m\n'
	@sh scripts/stop.sh fuse.pid
endif

	@$(STOPDISC)
endif

	@printf '* \033[1;33mDone\033[0;0m\n'
	@mv $@.io $@

# make serial load file from bin
spectrum/orterforth.ser : spectrum/orterforth.bin | $(ORTER)

	$(ORTER) spectrum header $< 3 32768 0 > $@

# final tap from bin
spectrum/orterforth.tap : spectrum/orterforth.bin

	z88dk-appmake +zx \
		-b spectrum/orterforth.bin \
		--org $(SPECTRUMORG) \
		-o spectrum/orterforth.tap

# base orterforth code
spectrum/rf.lib : rf.c rf.h | spectrum

	zcc +zx \
 		-DRF_TARGET_INC='\"$(SPECTRUMINC)\"' \
 		-DRF_ORIGIN=$(SPECTRUMORIGIN) \
		-x -o $@ \
		$<

# Z80 assembly optimised code
spectrum/rf_z80.lib : rf_z80.asm | spectrum

	zcc +zx \
		-Ca-DRF_ORIGIN=$(SPECTRUMORIGIN) \
		-x -o $@ \
		$<

# system code, which may be C or assembler
spectrum/system.lib : $(SPECTRUMSYSTEM) | spectrum

	zcc +zx \
		-x -o $@ \
		$<

# run an example program
.PHONY : example
example : $(TARGET)-example

tools :

	mkdir $@

tools/bin2cas.pl : | tools

	curl --output $@ https://www.6809.org.uk/dragon/bin2cas.pl

tools/github.com/haerfest/uef/uef2wave.py :

	git submodule init tools/github.com/haerfest/uef && git submodule update --init tools/github.com/haerfest/uef

tools/github.com/RC2014Z80/RC2014/BASIC-Programs/hexload/hexload.bas :

	git submodule init tools/github.com/RC2014Z80/RC2014 && git submodule update --init tools/github.com/RC2014Z80/RC2014

tools/z80/z80.c tools/z80/z80.h : | tools

	cd tools && git clone https://github.com/superzazu/z80.git

tools/zx81putil/zx81putil.c : | tools

	cd tools && git clone https://github.com/mcleod-ideafix/zx81putil.git

# uninstall from local
.PHONY : uninstall
uninstall :

	rm -f /usr/local/bin/orter
	rm -f /usr/local/bin/orterforth

zx81 :

	mkdir $@

.PHONY : zx81-run
zx81-run : zx81/inst.tzx | zx81/jtyone.jar

	java -jar zx81/jtyone.jar zx81/inst.tzx@0 -scale 3 -machine ZX81

zx81/%.tzx : zx81/%.P $(SYSTEM)/zx81putil

	$(SYSTEM)/zx81putil -tzx $<

zx81/inst.bin zx81/inst.P : zx81/rf.lib zx81/system.lib zx81/inst.lib main.c

	zcc +zx81 -lm -lzx81/rf -lzx81/system -lzx81/inst -create-app -m -o zx81/inst.bin main.c

zx81/inst.lib : inst.c rf.h | zx81

	zcc +zx81 -x -o $@ $<

zx81/jtyone.jar : | zx81

	curl --output $@ http://www.zx81stuff.org.uk/zx81/jtyone.jar

zx81/rf.lib : rf.c rf.h target/zx81/system.inc | zx81

	zcc +zx81 -x -o $@ $<

zx81/system.lib : target/zx81/system.c rf.h | zx81

	zcc +zx81 -x -o $@ $<
